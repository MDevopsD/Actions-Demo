name: my testing
on:
  schedule:
    - cron: '0 2 * * *'  # Trigger every day at 2 AM UTC
  workflow_dispatch:       # Allows manual trigger
  push:
jobs:
  check-for-changes:
    runs-on: ubuntu-latest

    outputs:
      changed: ${{ steps.check_changes.outputs.changed }}

    steps:
      - name: Checkout the code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch full history to check commits from any point

      - name: Fetch latest changes
        run: |
          git fetch --all  # Fetch all changes from the remote repository

      - name: Get the last commit hash from the latest commit
        id: get_last_commit
        run: |
          LAST_COMMIT_HASH=$(git log -n 1 --pretty=format:"%H")
          echo "Last commit hash: $LAST_COMMIT_HASH"
          echo "last_commit_hash=$LAST_COMMIT_HASH" >> $GITHUB_ENV

      - name: Check for changes from the last commit to HEAD
        id: check_changes
        run: |
          # Get the current HEAD commit hash
          CURRENT_HEAD_HASH=$(git rev-parse HEAD)

          # Compare the last commit hash and the current HEAD hash
          if [ "$LAST_COMMIT_HASH" != "$CURRENT_HEAD_HASH" ]; then
            echo "✅ Changes detected between last commit and current HEAD."
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "ℹ️ No changes detected since last commit."
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

  release:
    needs: check-for-changes
    if: needs.check-for-changes.outputs.changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Run tests and release
        run: |
          echo "🚀 Running tests and releasing code..."
          # Your release logic here (e.g., run tests, create release artifacts)

  notify-no-changes:
    needs: check-for-changes
    if: needs.check-for-changes.outputs.changed == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: No changes detected
        run: |
          echo "ℹ️ No changes detected. Skipping release."
